const schemaQuery = `
  DROP TABLE IF EXISTS projects_tags;
  DROP TABLE IF EXISTS tags;
  DROP TABLE IF EXISTS projects;
  DROP TABLE IF EXISTS users;

  CREATE TABLE users (
    id INTEGER PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
    email TEXT not NULL unique,
    password TEXT NOT NULL,
    name TEXT NOT NULL,
    bio TEXT,
    balance FLOAT,
    "isActive" BOOLEAN,
    "createdAt" TIMESTAMP WITH TIME ZONE NOT NULL,
    "updatedAt" TIMESTAMP WITH TIME ZONE NOT NULL
  );

  CREATE TABLE projects (
    id INTEGER PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
    name TEXT NOT NULL,
    "userId" INTEGER REFERENCES users(id)
  );

  CREATE TABLE tags (
    id INTEGER PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
    label TEXT NOT NULL,
    "projectId" INTEGER REFERENCES projects(id)
  );

  CREATE TABLE projects_tags (
    "projectId" INTEGER REFERENCES projects(id),
    "tagId" INTEGER REFERENCES projects(id)
  );
`;

const date = new Date().toUTCString();

const data = {
  users: [
    ['mail1@mail.com', 'pass1', 'name1', 'bio1', 1.5, 1, date, date],
    ['mail2@mail.com', 'pass2', 'name2', 'bio2', 2.5, 1, date, date],
    ['mail3@mail.com', 'pass3', 'name3', 'bio3', 3.5, 0, date, date],
    ['mail4@mail.com', 'pass4', 'name4', 'bio4', 5.5, 1, date, date],
    ['mail5@mail.com', 'pass5', 'name5', 'bio5', 4.5, 0, date, date]
  ]
}

export const seedData = async (knex) => {
  await knex.raw(schemaQuery);

  for(let table in data) {
    for(let item of data[table]) {
      const values = item.map(i => `'${i}'`).join(',');
      await knex.raw(`INSERT INTO ${table} VALUES (default, ${values})`);
    }
  }
}
